// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MusicManager.DAL;

#nullable disable

namespace MusicManager.DAL.Migrations
{
    [DbContext(typeof(MusicManagerDbContext))]
    partial class MusicManagerDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.9");

            modelBuilder.Entity("MusicManager.Domain.Common.Disc", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<string>("AssociatedFolderInfo")
                        .HasColumnType("TEXT")
                        .HasColumnName("associated_folder_info");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("identifier");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.ToTable("discs", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("MusicManager.Domain.Entities.Cover", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<Guid>("DiscId")
                        .HasColumnType("TEXT")
                        .HasColumnName("disc_id");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("path");

                    b.HasKey("Id")
                        .HasName("pk_cover");

                    b.HasIndex("DiscId")
                        .HasDatabaseName("ix_cover_disc_id");

                    b.ToTable("cover", (string)null);
                });

            modelBuilder.Entity("MusicManager.Domain.Entities.Director", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("full_name");

                    b.HasKey("Id")
                        .HasName("pk_directors");

                    b.ToTable("directors", (string)null);
                });

            modelBuilder.Entity("MusicManager.Domain.Entities.MovieReleaseLink", b =>
                {
                    b.Property<Guid>("MovieId")
                        .HasColumnType("TEXT")
                        .HasColumnName("movie_id");

                    b.Property<Guid>("MovieReleaseId")
                        .HasColumnType("TEXT")
                        .HasColumnName("movie_release_id");

                    b.HasKey("MovieId", "MovieReleaseId")
                        .HasName("pk_movie_release_links");

                    b.HasIndex("MovieReleaseId")
                        .HasDatabaseName("ix_movie_release_links_movie_release_id");

                    b.ToTable("movie_release_links", (string)null);
                });

            modelBuilder.Entity("MusicManager.Domain.Entities.PlaybackInfo", b =>
                {
                    b.Property<Guid>("SongId")
                        .HasColumnType("TEXT")
                        .HasColumnName("song_id");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("TEXT")
                        .HasColumnName("duration");

                    b.Property<string>("ExecutableFilePath")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("executable_file_path");

                    b.Property<string>("ExecutableType")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("executable_type");

                    b.HasKey("SongId")
                        .HasName("pk_playback_info");

                    b.ToTable("playback_info", (string)null);
                });

            modelBuilder.Entity("MusicManager.Domain.Models.Movie", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<string>("AssociatedFolderInfo")
                        .HasColumnType("TEXT")
                        .HasColumnName("associated_folder_info");

                    b.Property<Guid?>("DirectorId")
                        .HasColumnType("TEXT")
                        .HasColumnName("director_id");

                    b.Property<Guid>("SongwriterId")
                        .HasColumnType("TEXT")
                        .HasColumnName("songwriter_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_movies");

                    b.HasIndex("DirectorId")
                        .HasDatabaseName("ix_movies_director_id");

                    b.HasIndex("SongwriterId")
                        .HasDatabaseName("ix_movies_songwriter_id");

                    b.ToTable("movies", (string)null);
                });

            modelBuilder.Entity("MusicManager.Domain.Models.Song", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<Guid>("DiscId")
                        .HasColumnType("TEXT")
                        .HasColumnName("disc_id");

                    b.Property<int?>("DiscNumber")
                        .HasColumnType("INTEGER")
                        .HasColumnName("disc_number");

                    b.Property<int>("Order")
                        .HasColumnType("INTEGER")
                        .HasColumnName("order");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_songs");

                    b.HasIndex("DiscId")
                        .HasDatabaseName("ix_songs_disc_id");

                    b.ToTable("songs", (string)null);
                });

            modelBuilder.Entity("MusicManager.Domain.Models.Songwriter", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<string>("AssociatedFolderInfo")
                        .HasColumnType("TEXT")
                        .HasColumnName("associated_folder_info");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("last_name");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_songwriters");

                    b.ToTable("songwriters", (string)null);
                });

            modelBuilder.Entity("MusicManager.Domain.Models.Compilation", b =>
                {
                    b.HasBaseType("MusicManager.Domain.Common.Disc");

                    b.Property<Guid>("SongwriterId")
                        .HasColumnType("TEXT")
                        .HasColumnName("songwriter_id");

                    b.HasIndex("SongwriterId")
                        .HasDatabaseName("ix_compilations_songwriter_id");

                    b.ToTable("compilations", (string)null);
                });

            modelBuilder.Entity("MusicManager.Domain.Models.MovieRelease", b =>
                {
                    b.HasBaseType("MusicManager.Domain.Common.Disc");

                    b.ToTable("movies_releases", (string)null);
                });

            modelBuilder.Entity("MusicManager.Domain.Common.Disc", b =>
                {
                    b.OwnsOne("MusicManager.Domain.ValueObjects.ProductionInfo", "ProductionInfo", b1 =>
                        {
                            b1.Property<Guid>("DiscId")
                                .HasColumnType("TEXT")
                                .HasColumnName("id");

                            b1.Property<string>("Country")
                                .HasColumnType("TEXT")
                                .HasColumnName("production_info_country");

                            b1.Property<int?>("Year")
                                .HasColumnType("INTEGER")
                                .HasColumnName("production_info_year");

                            b1.HasKey("DiscId");

                            b1.ToTable("discs");

                            b1.WithOwner()
                                .HasForeignKey("DiscId")
                                .HasConstraintName("fk_discs_discs_id");
                        });

                    b.Navigation("ProductionInfo")
                        .IsRequired();
                });

            modelBuilder.Entity("MusicManager.Domain.Entities.Cover", b =>
                {
                    b.HasOne("MusicManager.Domain.Common.Disc", null)
                        .WithMany("Covers")
                        .HasForeignKey("DiscId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_cover_discs_disc_temp_id");
                });

            modelBuilder.Entity("MusicManager.Domain.Entities.MovieReleaseLink", b =>
                {
                    b.HasOne("MusicManager.Domain.Models.Movie", "Movie")
                        .WithMany("ReleasesLinks")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_movie_release_links_movies_movie_temp_id");

                    b.HasOne("MusicManager.Domain.Models.MovieRelease", "MovieRelease")
                        .WithMany("MoviesLinks")
                        .HasForeignKey("MovieReleaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_movie_release_links_discs_movie_release_temp_id2");

                    b.OwnsOne("MusicManager.Domain.ValueObjects.EntityDirectoryInfo", "ReleaseLinkInfo", b1 =>
                        {
                            b1.Property<Guid>("MovieReleaseLinkMovieId")
                                .HasColumnType("TEXT")
                                .HasColumnName("movie_id");

                            b1.Property<Guid>("MovieReleaseLinkMovieReleaseId")
                                .HasColumnType("TEXT")
                                .HasColumnName("movie_release_id");

                            b1.Property<string>("Path")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasColumnName("release_link_info_path");

                            b1.HasKey("MovieReleaseLinkMovieId", "MovieReleaseLinkMovieReleaseId");

                            b1.ToTable("movie_release_links");

                            b1.WithOwner()
                                .HasForeignKey("MovieReleaseLinkMovieId", "MovieReleaseLinkMovieReleaseId")
                                .HasConstraintName("fk_movie_release_links_movie_release_links_movie_id_movie_release_id");
                        });

                    b.Navigation("Movie");

                    b.Navigation("MovieRelease");

                    b.Navigation("ReleaseLinkInfo");
                });

            modelBuilder.Entity("MusicManager.Domain.Entities.PlaybackInfo", b =>
                {
                    b.HasOne("MusicManager.Domain.Models.Song", null)
                        .WithOne("PlaybackInfo")
                        .HasForeignKey("MusicManager.Domain.Entities.PlaybackInfo", "SongId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_playback_info_songs_song_id");

                    b.OwnsOne("MusicManager.Domain.ValueObjects.CueInfo", "CueInfo", b1 =>
                        {
                            b1.Property<Guid>("PlaybackInfoSongId")
                                .HasColumnType("TEXT")
                                .HasColumnName("song_id");

                            b1.Property<string>("CueFilePath")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasColumnName("cue_info_cue_file_path");

                            b1.Property<TimeSpan>("Index00")
                                .HasColumnType("TEXT")
                                .HasColumnName("cue_info_index00");

                            b1.Property<TimeSpan>("Index01")
                                .HasColumnType("TEXT")
                                .HasColumnName("cue_info_index01");

                            b1.Property<string>("SongTitleInCue")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasColumnName("cue_info_song_title_in_cue");

                            b1.HasKey("PlaybackInfoSongId");

                            b1.ToTable("playback_info");

                            b1.WithOwner()
                                .HasForeignKey("PlaybackInfoSongId")
                                .HasConstraintName("fk_playback_info_playback_info_song_id");
                        });

                    b.Navigation("CueInfo");
                });

            modelBuilder.Entity("MusicManager.Domain.Models.Movie", b =>
                {
                    b.HasOne("MusicManager.Domain.Entities.Director", "Director")
                        .WithMany("Movies")
                        .HasForeignKey("DirectorId")
                        .HasConstraintName("fk_movies_directors_director_temp_id");

                    b.HasOne("MusicManager.Domain.Models.Songwriter", null)
                        .WithMany("Movies")
                        .HasForeignKey("SongwriterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_movies_songwriters_songwriter_temp_id1");

                    b.OwnsOne("MusicManager.Domain.ValueObjects.ProductionInfo", "ProductionInfo", b1 =>
                        {
                            b1.Property<Guid>("MovieId")
                                .HasColumnType("TEXT")
                                .HasColumnName("id");

                            b1.Property<string>("Country")
                                .HasColumnType("TEXT")
                                .HasColumnName("production_info_country");

                            b1.Property<int?>("Year")
                                .HasColumnType("INTEGER")
                                .HasColumnName("production_info_year");

                            b1.HasKey("MovieId");

                            b1.ToTable("movies");

                            b1.WithOwner()
                                .HasForeignKey("MovieId")
                                .HasConstraintName("fk_movies_movies_id");
                        });

                    b.Navigation("Director");

                    b.Navigation("ProductionInfo")
                        .IsRequired();
                });

            modelBuilder.Entity("MusicManager.Domain.Models.Song", b =>
                {
                    b.HasOne("MusicManager.Domain.Common.Disc", null)
                        .WithMany("Songs")
                        .HasForeignKey("DiscId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_songs_discs_disc_temp_id1");
                });

            modelBuilder.Entity("MusicManager.Domain.Models.Compilation", b =>
                {
                    b.HasOne("MusicManager.Domain.Common.Disc", null)
                        .WithOne()
                        .HasForeignKey("MusicManager.Domain.Models.Compilation", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_compilations_discs_id");

                    b.HasOne("MusicManager.Domain.Models.Songwriter", null)
                        .WithMany("Compilations")
                        .HasForeignKey("SongwriterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_compilations_songwriters_songwriter_temp_id");
                });

            modelBuilder.Entity("MusicManager.Domain.Models.MovieRelease", b =>
                {
                    b.HasOne("MusicManager.Domain.Common.Disc", null)
                        .WithOne()
                        .HasForeignKey("MusicManager.Domain.Models.MovieRelease", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_movies_releases_discs_id");
                });

            modelBuilder.Entity("MusicManager.Domain.Common.Disc", b =>
                {
                    b.Navigation("Covers");

                    b.Navigation("Songs");
                });

            modelBuilder.Entity("MusicManager.Domain.Entities.Director", b =>
                {
                    b.Navigation("Movies");
                });

            modelBuilder.Entity("MusicManager.Domain.Models.Movie", b =>
                {
                    b.Navigation("ReleasesLinks");
                });

            modelBuilder.Entity("MusicManager.Domain.Models.Song", b =>
                {
                    b.Navigation("PlaybackInfo")
                        .IsRequired();
                });

            modelBuilder.Entity("MusicManager.Domain.Models.Songwriter", b =>
                {
                    b.Navigation("Compilations");

                    b.Navigation("Movies");
                });

            modelBuilder.Entity("MusicManager.Domain.Models.MovieRelease", b =>
                {
                    b.Navigation("MoviesLinks");
                });
#pragma warning restore 612, 618
        }
    }
}
